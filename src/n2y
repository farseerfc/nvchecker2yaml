#!/bin/sh

#nvchecker.ini中可能出现的项
n2ynvcheckeritems=("aur" "github" "use_latest_release" "encoding" "gitlab"
                   "branch" "use_max_tag" "bitbucket" "cmd" "prefix"
                   "vcs" "pypi" "url" "regex" "user_agent" "from_pattern" 
                   "to_pattern" "missing_ok" "npm" "manual" "sort_version_key"
                   "gems" "hackage" "cpan" "proxy" "packagist"
                   "pacman" "strip_release" "archpkg" "ignored_tags"
                   "debianpkg" "suite" "ubuntupkg" "anitya"
                   "android_sdk" "repo")

#显示帮助信息
showhelp() {
    echo "This is a simple tool to help maintainers switch from nvchecker.ini to lilac.yaml"
    echo "For more informations about lilac.yaml, see https://archlinuxcn.github.io/lilac/"
    echo
    echo "The semi-automated process follows the following steps: "
    echo "  - Ask for the directory where your local clone of Arch CN repo locates"
    echo "  - Ask for your email (the same one you put in nvchecker.ini)"
    echo "  - Check for all your packages that haven't been switched to lilac.yaml"
    echo "  - For every package that hasn't been switched: "
    echo "      - Auto fit pre_build, post_build, post_build_always, "
    echo "        time_limit_hours, update_on and maintainers in lilac.yaml"
    echo "      - Ask if you want to change some of the above ones (especially maintainers)"
    echo "      - If you used to use the archlinuxcn build prefix, ask if you want to "
    echo "        use the new depends feature. Auto-fill this item is a considerable feature."
    echo "      - Generate a preview of the new yaml file"
    echo "      - Save to lilac.yaml and trim lilac.py"
    echo "      - Git commit with message 'Switch [pkgname] to lilac.yaml'"
    echo "  - Comment processed packages in nvchecker.ini"
    echo "  - Git commit with message 'Update nvchecker.ini'"
    echo
    echo "Specify a package or several packages will start the process for only those packages"
    echo
    echo "Use --help to view this message"
}

processnvchecker() {
    #处理nvchecker.ini
    echo "Now commenting out all ${n2ycompletedpkg} in nvchecker.ini for later manual remove"
    commentflag=0
    while IFS= read -r line; do
        if [[ ${line//\ /''} = "" ]]; then
            echo "${line}" >> "${n2yuid}/nvchecker.new.ini"
            continue
        fi
        if [[ ${line//\ /''} = \;* ]]; then
            echo "${line}" >> "${n2yuid}/nvchecker.new.ini"
            continue
        fi
        if [[ ${line//\ /''} = \#* ]]; then
            echo "${line}" >> "${n2yuid}/nvchecker.new.ini"
            continue
        fi
        if [[ ${line//\ /''} = \[*\] ]]; then
            n2yinipropkg=${line##*\[}
            n2yinipropkg=${n2yinipropkg%%\]*}
            n2yinipropkg=${n2yinipropkg//\ /''}
            if [[ ${n2ycompletedpkg} = "${n2yinipropkg}" ]]; then
                echo "Commenting out ${n2yinipropkg}"
                commentflag=1
            else
                commentflag=0
            fi
        fi
        if [[ ${commentflag} -eq 0 ]]; then
            echo "${line}" >> "${n2yuid}/nvchecker.new.ini"
        else
            echo ";${line}" >> "${n2yuid}/nvchecker.new.ini"
        fi
    done < "${n2yrepodir}/nvchecker.ini"

    cd "${n2yrepodir}"
    rm nvchecker.ini -f
    cp "${n2yuid}/nvchecker.new.ini" nvchecker.ini
    rm -f "${n2yuid}/nvchecker.new.ini"
    git add nvchecker.ini
    git commit -m "Update nvchecker.ini: removing ${n2ycompletedpkg}"
}

# 创建临时目录
n2yuid=$(mktemp -d /tmp/n2y_XXXXXXXX)

for n2ycmdi in $(seq 1 $#); do
    eval "n2ycmd=\${${n2ycmdi}}"
    if [[ ${n2ycmd} = "--help" ]]; then
        showhelp
        rm "${n2yuid}" -rf
        exit 0
    fi
    let n2ycmdim1=${n2ycmdi}-1
    n2ypkgnames[${n2ycmdim1}]=${n2ycmd}
done

#获取CN源本地克隆地址
read -p "Path to your local clone of Arch CN repo [Current path]: " n2yrepodir

#默认使用当前目录
if [[ ! ${n2yrepodir} ]]; then
    n2yrepodir=$PWD
fi

#规范化路径
n2yrepodir=${n2yrepodir%\/}

#检查路径合法性
#nvchecker.ini
if [[ ! -f "${n2yrepodir}/nvchecker.ini" ]]; then
    echo "${n2yrepodir}/nvchecker.ini not found! This path is invalid. "
    rm "${n2yuid}" -rf
    exit 255
fi
#.git
if [[ ! -d "${n2yrepodir}/.git" ]]; then
    echo "${n2yrepodir}/ is not a git repo! This path is invalid. "
    rm "${n2yuid}" -rf
    exit 255
fi

#获取邮箱
read -p "Your email used in nvchecker.ini: " n2yemail

#从nvchecker里检查邮箱和维护包的开始行数
n2ygrepout=$(cat "${n2yrepodir}/nvchecker.ini" | grep -in "<${n2yemail}>")
if [[ $? -eq 0 ]]; then
    n2yinilineindex=${n2ygrepout%:#*}
    n2yinimtnname=${n2ygrepout#*:#\ }
    n2yinimtnname=${n2yinimtnname%\ <*}
else
    echo "Can't find your email in nvchecker.ini. Note that this email is *NOT* case-sensitive. "
    rm "${n2yuid}" -rf
    exit 255
fi

while true; do
    #询问是否使用Github账户
    echo "It's often recommended to use your Github account instead of name <email> in lilac.yaml, "
    echo "unless you don't have a public email address in your Github profile."
    read -p "Do you want to use it? (y/n) [y] " n2yghyn

    if [[ ! ${n2yghyn} ]]; then
        n2yghyn=y;
    fi

    if [[ ${n2yghyn} = "y" ]]; then
        read -p "Please input your Github account name (case-sensitive): " n2ymtngh
        break;
    elif [[ ${n2yghyn} = "n" ]]; then
        echo "Never mind"
        break;
    else
        echo "Invalid input"
    fi

done

#获取规范化的部分ini，储存于${n2yuid}/part.ini
let n2yinilineindex_s=${n2yinilineindex}+1
n2yinipart=$(tail --lines=+${n2yinilineindex_s} "${n2yrepodir}/nvchecker.ini")
while read -r line; do
    if [[ ${line} = *\{\{\{1 ]]; then
        break
    fi
    if [[ ${line/\ /""} = "" ]]; then
        continue
    fi
    if [[ ${line/\ /""} = \;* ]]; then
        continue
    fi
    echo " ${line//\ /''}" >> "${n2yuid}/part.ini"
done <<< ${n2yinipart}

if [[ $# -eq 0 ]]; then
    #检查所有的包
    n2ypkgcount=0
    #获取包的名字
    while read -r line; do
        if [[ ${line//\ /''} = \;* ]]; then
            continue
        fi
        if [[ ${line//\ /''} = \#* ]]; then
            continue
        fi
        if [[ ${line//\ /''} = \[*\] ]]; then
            n2ytmppkgname=${line#*[}
            n2ytmppkgname=${n2ytmppkgname%]*}
            n2ypkgnames[${n2ypkgcount}]=${n2ytmppkgname}
            let n2ypkgcount=${n2ypkgcount}+1
            n2ypkgcount=${n2ypkgcount}
        fi
    done < "${n2yuid}/part.ini"
else
    #检查包名合法性
    n2yini=$(cat "${n2yuid}/part.ini")
    for n2ypkgnamei in $(seq 1 $#); do
        let n2ypkgnameim1=${n2ypkgnamei}-1
        if [[ ${n2yini//\ /''} = *"[${n2ypkgnames[${n2ypkgnameim1}]}]"* ]]; then
            continue
        fi
        echo "Package ${n2ypkgnames[${n2ypkgnameim1}]} cannot be found in your section of nvchecker.ini"
        rm "${n2yuid}" -rf
        exit 255
    done
    n2ypkgcount=$#
fi

unset n2ycompletedpkg

#逐个处理包
let n2ymaxmaini=${n2ypkgcount}-1
for n2ymaini in $(seq 0 ${n2ymaxmaini}); do
    n2ycurrentpkg=${n2ypkgnames[${n2ymaini}]}
    echo "Now processing ${n2ycurrentpkg}"
    echo "Entering ${n2yrepodir}/${n2ycurrentpkg}"
    mkdir "${n2yuid}/${n2ycurrentpkg}"
    cd "${n2yrepodir}/${n2ycurrentpkg}"

    #（暴力）处理ini；灵梦风格，嗯（
    n2yinisection=$(cat "${n2yuid}/part.ini")
    n2yinisection=${n2yinisection##*\[${n2ycurrentpkg}\]}
    n2yinisection=${n2yinisection%%\ [*}
    while read -r line; do
        line=${line//\ /''}
        if [[ ${line} = \;* ]]; then
            continue
        fi
        if [[ ${line} = \#* ]]; then
            continue
        fi
        lineitem=${line%%=*}
        linevar=${line##*=}
        if [[ ${lineitem} = "strip-release" ]]; then
            lineitem="strip_release"
        fi
        if [[ ! ${lineitem} ]]; then
            continue
        fi
        eval "${lineitem}=\"${linevar}\""
    done <<< ${n2yinisection}

    #对应ini部分生成yaml的update_on
    echo "update_on:" > "${n2yuid}/${n2ycurrentpkg}/lilac.update_on.yaml"
    n2yyamlupdateonprefix="  - "
    for testi in ${n2ynvcheckeritems[@]}; do
        eval "n2ycurrentval=\${${testi}}"
        eval "unset ${testi}"
        if [[ ${n2ycurrentval} ]]; then
            if [[ ${testi} = "strip_release" ]]; then
                echo "${n2yyamlupdateonprefix}strip-release: ${n2ycurrentval}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.update_on.yaml"
            else
                echo "${n2yyamlupdateonprefix}${testi}: ${n2ycurrentval}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.update_on.yaml"
            fi
            n2yyamlupdateonprefix="    "
        elif [[ ${testi} = "aur" && ${n2yinisection} = *"aur="* ]]; then
            echo "${n2yyamlupdateonprefix}${testi}: ${n2ycurrentpkg}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.update_on.yaml"
            n2yyamlupdateonprefix="    "
        fi
    done

    if [[ ! -f lilac.py ]]; then
        echo "No lilac.py found. Ignoring."
        touch "${n2yuid}/${n2ycurrentpkg}/lilac.frompy.yaml"
    else
        cp lilac.py "${n2yuid}/${n2ycurrentpkg}/lilac.old.py"
        echo "Analyzing lilac.py"
        #分析lilac.py，用以填写build_prefix，pre_build，post_build
        echo "# Trimmed lilac.py" > "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"

        n2y_def_pre_build=false
        n2y_def_post_build=false
        while IFS= read -r line; do
            trimmedline=${line//\ /''}
            if [[ ${trimmedline} = "build_prefix="* ]]; then
                #build_prefix
                n2ybuild_prefix=${trimmedline##*=}
                n2ybuild_prefix=${n2ybuild_prefix#\'}
                n2ybuild_prefix=${n2ybuild_prefix%\'}
                echo "#${line}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"
            elif [[ "${trimmedline}" = "defpre_build"* ]]; then
                n2y_def_pre_build=true
                echo "${line}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"
            elif [[ "${trimmedline}" = "pre_build="* ]]; then
                #pre_build
                n2ypre_build=${trimmedline##*=}
                echo "#${line}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"
            elif [[ "${trimmedline}" = "defpost_build"* ]]; then
                n2y_def_post_build=true
                echo "${line}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"
            elif [[ "${trimmedline}" = "post_build="* ]]; then
                #post_build
                n2ypost_build=${trimmedline##*=}
                echo "#${line}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"
            elif [[ "${trimmedline}" = "if__name__=="* ]]; then
                echo "#${line}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"
            elif [[ "${trimmedline}" = "single_main"* ]]; then
                echo "#${line}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"
            else
                echo "${line}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"
            fi
            
        done < "${n2yuid}/${n2ycurrentpkg}/lilac.old.py"
        if [[ ${n2ybuild_prefix} ]]; then
            echo "build_prefix: ${n2ybuild_prefix}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.frompy.yaml"
            echo >> "${n2yuid}/${n2ycurrentpkg}/lilac.frompy.yaml"
        fi
        if [[ ${n2y_def_pre_build} = false ]]; then
            if [[ ${n2ypre_build} ]]; then
                echo "pre_build: ${n2ypre_build}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.frompy.yaml"
                echo >> "${n2yuid}/${n2ycurrentpkg}/lilac.frompy.yaml"
            fi
        fi
        if [[ ${n2y_def_post_build} = false ]]; then
            if [[ ${n2ypost_build} ]]; then
                echo "post_build: ${n2ypost_build}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.frompy.yaml"
                echo >> "${n2yuid}/${n2ycurrentpkg}/lilac.frompy.yaml"
            fi
        fi
        unset n2y_def_pre_build n2y_def_post_build
    fi
    #组装yaml文件
    echo "# This file is auto-generated by n2y" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml"
    echo >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml"
    echo "maintainers:" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml"
    if [[ ${n2yghyn} = y ]]; then
        echo "  - github: ${n2ymtngh}" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml"
    else
        echo "  - email: ${n2yinimtnname} <${n2yemail}>" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml"
    fi
    echo >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml"
    cat "${n2yuid}/${n2ycurrentpkg}/lilac.frompy.yaml" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml"
    cat "${n2yuid}/${n2ycurrentpkg}/lilac.update_on.yaml" >> "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml"
    if [[ -f "${n2yuid}/${n2ycurrentpkg}/lilac.new.py" ]]; then
        echo "These is your new lilac.py and generated lilac.yaml. "
        bat --paging=never "${n2yuid}/${n2ycurrentpkg}/lilac.new.py"
    else
        echo "These is your generated lilac.yaml. "
    fi
    bat --paging=never "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml"
    echo "If you want to make some changes, do it now in ${n2yuid}/${n2ycurrentpkg}/"
    while true; do
        read -p "Note that your lilac.py will be *OVERWRITTEN*. Continue? (y/n) [y]: " n2ynull
        if [[ ! ${n2ynull} ]]; then
            n2ynull=y
        fi
        if [[ ${n2ynull} = "y" ]]; then
            break;
        elif [[ ${n2ynull} = "n" ]]; then
            break;
        fi
        echo "Invalid input"
    done
    #应用更改
    if [[ ${n2ynull} = "y" ]]; then
        if [[ -f "${n2yuid}/${n2ycurrentpkg}/lilac.new.py" ]]; then
            rm lilac.py -f
            cp "${n2yuid}/${n2ycurrentpkg}/lilac.new.py" lilac.py
            git add lilac.py
        fi
        cp "${n2yuid}/${n2ycurrentpkg}/lilac.new.yaml" lilac.yaml
        #提交
        git add lilac.yaml
        git commit -m "Switch ${n2ycurrentpkg} to lilac.yaml"
        n2ycompletedpkg="${n2ycurrentpkg}"
        processnvchecker
    else
        echo "Changes ignored"
    fi
    cd "${n2yrepodir}"
    rm "${n2yuid}/${n2ycurrentpkg}" -r
done

echo "WARNING: Check EVERYTHING before you push"

#删除临时目录
rm "${n2yuid}" -rf